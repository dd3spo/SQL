
# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)
SELECT * FROM BIT_DB.Spotifydata;

#1. the average dance ability by artist and track
SELECT artist_name, track_name, AVG(danceability)
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name;

#2. shows the top 10 artist by popularity
SELECT track_name, artist_name, popularity
FROM  BIT_DB.Spotifydata
ORDER BY popularity DESC LIMIT 10;

#3. shows if the duration ms is equal or higher than 250000 the song is long and if its equal or higher then 200000 the song is medium 
and everything under 200000 is short
SELECT artist_name, track_name, duration_ms,
    CASE WHEN duration_ms >= 250000 THEN 'long'
        WHEN duration_ms >= 200000 THEN 'medium'
        ELSE 'short'
END AS duration_category
FROM BIT_DB.Spotifydata
ORDER BY duration_category asc;

#4. shows all the artist and tracks name who have a 9 as popularity and a time signature of 4
SELECT artist_name, track_name, popularity,time_signature
FROM BIT_DB.Spotifydata
WHERE popularity LIKE '9%'  AND time_signature=4;

#5. the min energy from the all the artist
SELECT artist_name, track_name, MIN(energy) AS min_energy
FROM BIT_DB.Spotifydata;

#6. show the track name with a song key between 2 and 8
SELECT track_name,song_key
FROM BIT_DB.Spotifydata
WHERE song_key  between '2' and '8'; 

#7. this case statement checks conditions based on popularity, energy, and danceability
SELECT artist_name, track_name, popularity, energy, danceability,
    CASE
        WHEN popularity >= 90 AND energy >= 70 AND danceability >= 70 THEN 'High Popularity, High Energy, High Danceability'
        WHEN popularity >= 80 AND energy >= 60 AND danceability >= 60 THEN 'High Popularity, Moderate Energy, Moderate Danceability'
        WHEN popularity >= 70 AND energy >= 50 AND danceability >= 50 THEN 'Moderate Popularity, Moderate Energy, Moderate Danceability'
        ELSE 'Other'
    END AS category
FROM BIT_DB.Spotifydata;
